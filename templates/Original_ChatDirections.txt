This project is to write chapter pages in html, javascript, and svg, for a given algorithm.
I have included the template file which you should closely follow (the one with TEMPLATE in the name). 
I have also included a finished example of Hoare Partition to give you an idea of what I am going for.
I have included the css and javascript files that are included in the file.
Please ensure that the entire structure of the file stays as is--especially the header.
Please do not use non-ascii characters. 
Use Latex for math, and use the \( \) delimiters.
For the motivation and description, make sure to be clear and complete, but concise. Give the motivation for the idea behind the algorithm and then describe the algorithm in paragraph form. Then give a more pseudocode-like presentaion using on <ol>, possibly with multiple levels in some cases.
If an example would be helpful as you are describing the algorithm, use one. Use HTML tables and/or SVG if you need a simple drawing to help illustrate the idea. The demo will go through the whole thing, so that is not necessary. But a mini example/demo could help in some cases. 
Make sure to explain why the algorithm is classified as using the given technique. If I forget to tell you the technique and you aren't sure which one, please ask. If you know, just go with it.
Assume the name/path for the demo--I can fix it if you guess wrong.
For the C++ code, please do not use stl or other packages. Assume we are using arrays for most thing. If unclear, please ask. For Java, use arrays unless otherwise specified. For Python, do it how it would typically be done in python. If it is siginficantly different than the other implementations, add a 4th tab. In this case the third tab will be python that most closely resembles the others, and the 4th is the more pythonic version. But only do this if it is significantly different (e.g. uses a dictionary).
For the analysis, please give complete but concise time and space analysis. Talk through the code explaining the time for each part and bring it all together. If there is a recurrence relation, give a clear solution of it. If the analysis is complicated, ask me if I want to include or skimp on the details. 
For space complexity, focus on the extra space needed, not including the input. If slight variations of the algorithm use different space, point that out (e.g. sometimes recursive algorithms might take O(n) space for the stack, but an iterative version only needs O(1)). When appropriate, do best, worst, and average (or expected) cases. Use Big-O notation ( e.g. \(O(n)\) ). 
For links, I am thinking along the lines of wikipedia, geeksforgeeks, and other sites that are well known to have algorithms content, including explanations and/or demos. Make sure the links are legit and specifically related to the given algorithm (or very closely related algorithms). 
For reading comprehension questions, they should be based only on what is given on the page. I would like 4-10 questions that focus on the major points of the algorithm--how it works, why it is an example of the specified technique, working through an example, thinking about the pros and cons of it, retracing part or all of the analysis, etc. Ask about the roles of particular variables in the code if they are important but subtle. Do not forget to provide the answers in the correct format.
For in-class activities, I am thinking of things like working through examples, making improvements, comparing it with others, coming up with to solve a different problem using the same ideas, etc. Digging deepering into the ideas and solidifying them. They can be group activities. They can ivnolve using the demos, writing things on the board or paper, using playing cards to demostrate things, etc. Keep in mind the audience is college students. The questions should be very specific and not vague (e.g. "choose an algorithm and..." or "Choose an array and trace through the algorithm" are too vague--sgive a specific algorithms, specific data, etc.) The instructor should not have to make anything up to use the in-class ctivities. 6-10 activities would be great if you can think of that many.
For Problems, it should be ones specific to this algorithm, not the technique in general. It can be working through an example, creaing and/or analyzing variations, comparing multiple algorithme for the same problem, applying the idea from this algorithm to another problem, etc. Feel free to draw from well known problems. Make sure the problems are well/narrowly defined and not too vague. It should be clear exactly what the student needs to do. 6-10 problems would be great if you can think of that many.